
// Is String Valid (Paranthesis)

public boolean isValid(String s){
	
	Stack<Character> stack = new Stack<>();
	
	for(char c : s.toCharArray()){
		
		switch(c){
			case ')': if(!stack.isEmpty() && stack.peek() == '('){
					stack.pop();
					}
				else return false;
				break;
			case '}': if(!stack.isEmpty() && stack.peek() == '{'){
					stack.pop();
					}
				else return false;
				break;
			case ']': if(!stack.isEmpty() && stack.peek() == '['){
					stack.pop();
					}
				else return false;
				break;
			default: stack.push(c);
		}
	}
	
	return stack.isEmpty()?true:false; 
}



// 71 -> Simplify Path

public String simplifyPath(String path)
{
	Stack<String> stack = new Stack<>();
	String sb = new String();
	
	String[] arr = path.split("/");
	
	for(String s : arr)
	{
		if(s.equals("") || s.equals(".") || (s.equals("..") && stack.isEmpty())) continue;
		else if(s.equals("..")) stack.pop();
		else stack.push(s);
	}
	
	if(stack.isEmpty()) return "/";
	for(String s : stack)
	{
		sb = sb + "/" + s;
	}
	
	return sb;

}


// 155 -> Min Stack


class MinStack {
	
	Stack<int[]> stack;
	public MinStack() {
        	stack = new Stack<>();
    	}
    
    	public void push(int val) {
		int min = stack.isEmpty()? val : Math.min(val,stack.peek()[1]);
        	stack.push(new int[]{val, min});
    	}
    
    	public void pop() {
        	stack.pop();
    	}
    
    	public int top() {
        	return stack.peek()[0];
    	}
    
    	public int getMin() {
        	return stack.peek()[1];
    	}
}


// 150 -> Reverse Polish



class Solution {
	public int evalRPN(String[] tokens) {
        	
		Stack<String> stack = new Stack<>();
        	int second = 0, first =0, res = 0;

		for(String s : tokens)
		{
			switch(s)
			{	
				case "+": second = stack.pop();
				          first = stack.pop();	 
					  res = first + second;
					  stack.push(res);
					  break;
				case "-": second = stack.pop();
				          first = stack.pop();	 
					  res = first - second;
					  stack.push(res);
					  break;
				case "*": second = stack.pop();
				          first = stack.pop();	 
					  res = first * second;
					  stack.push(res);
					  break;
				case "/": int second = stack.pop();
				          int first = stack.pop();	 
					  res = first / second;	
					  stack.push(res);
					  break;
				default: stack.push();
			}
		}
		
		return stack.pop();
    	}
}


// 141 -> Linked list cycle

public class Solution {
    	public boolean hasCycle(ListNode head) {
        	
		if(head == null) return false;

		ListNode slow = head, fast = head;
		
		while(fast != null && fast.next != null){
			
			slow = slow.next;
			fast = fast.next.next;
			if(slow == fast) return true;
		}
		
		return false;
		
    	}
}


// 2  linked list

class Solution {
    	public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
		ListNode res = new ListNode(-1), resPtr = res;
		int carry=0, sum =0;
		while(l1 != null && l2 != null)
		{
			sum = l1.val + l2.val + carry;
			if(sum > 9){
				carry = 1;
				sum = sum % 10;
			}
			else{
				carry =0;
			}
			resPtr.next = new ListNode(sum);
			resPtr = resPtr.next;
			l1 = l1.next;
			l2 = l2.next;
			
		}


		while(l1 != null)
		{
			sum = l1.val + carry;
			if(sum > 9){
				carry = 1;
				sum = sum % 10;
			}
			else{
				carry =0;
			}
			resPtr.next = new ListNode(sum);
			resPtr = resPtr.next;
			l1 = l1.next;
			
		}

		while(l2 != null)
		{
			sum = l2.val + carry;
			if(sum > 9){
				carry = 1;
				sum = sum % 10;
			}
			else{
				carry =0;
			}
			resPtr.next = new ListNode(sum);
			resPtr = resPtr.next;
			l2 = l2.next;
			
		}
	
		
		if(carry > 0){
			resPtr.next = new ListNode(carry);
			resPtr = resPtr.next;
		}
		
		return res.next;	
	
    	}
}


//  21 -> Merege sorted Linked list


class Solution {
    	public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        	ListNode res = new ListNode(-1), resPtr = res;
		
		while(l1 != null && l2 != null)g tf  
		{
			if(l1.val < l2.val)
			{
				resPtr.next = l1;
				resPtr = resPtr.next;
				l1 = l1.next;
			}
			else
			{
				resPtr.next = l2;
				resPtr = resPtr.next;
				l2 = l2.next;
			}
		}

		if(l1 != null)
		{
			resPtr.next = l1;
		}
		
		if(l2 != null)
		{
			resPtr.next = l2;
		}

		return res.next;


    	}
}

// 138 -> Random Pointer

class Solution {
    	public Node copyRandomList(Node head) {
        	if(head == null) return head;

		Node res = new Node(-1), resPtr = res, ptr = head;
		HashMap<Node,Node> map = new HashMap<>();
		map.put(null, null);

		while(ptr != null)
		{	
			map.put(ptr, new Node(ptr.val));
			ptr = ptr.next;
		}
		ptr = head;

		while(ptr != null)
		{	
			Node newNode = map.get(ptr);
			resPtr.next = newNode;
			resPtr = resPtr.next;
			newNode.next = map.get(ptr.next);
			newNode.random = map.get(ptr.random);
			
			ptr= ptr.next;
		}
		

		return res.next;

    	}
}


// 92 - reverse Linked List-2


class Solution {
	
	public ListNode reverse(ListNode start, ListNode end){
		
		ListNode prev = null, curr = start, next = start;
		
		while(curr != end){
			next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;

		}
		
		return prev;
	}


    	public ListNode reverseBetween(ListNode head, int left, int right) {
        
		ListNode res = new ListNode(-1), resPtr = res, ptr = head;
		int curr = 1;
		
		while(curr != left){
			resPtr.next = ptr;
			resPtr = resPtr.next;
			ptr = ptr.next;	
			curr++;
		}
		
		ListNode start = ptr;
		
		while(curr != right){
			ptr = ptr.next;
			curr++;
		}
		ListNode end = ptr.next;

		// Reverse : start is at start, end is at next to end 
		ListNode reversedHead = reverse(start, end);
		
		resPtr.next = reversedHead;
		start.next = end;

		return res.next;
		
    	}
}


// 86 -> Partition List

class Solution {
    	public ListNode partition(ListNode head, int x) {
		if(head == null) return head;
        	
		ListNode less = new ListNode(-1), lessPtr = less, more = new ListNode(-1),morePtr = more, prev = null;
		while(head != null)
		{
			if(head.val < x){
				prev = lessPtr;
				lessPtr.next = head;
				lessPtr = lessPtr.next;
				
			}
			else{
				morePtr.next = head;
				morePtr = morePtr.next;
			}
			head = head.next;
		}
		

		lessPtr.next = more.next;
		morePtr.next = null;
		
		return less.next;
		
    	}
}


// 146 -> LRU Cache

class Node{
	int key;
	int val;
	Node prev;
	Node next;
	
	Node(int key, int val){
		this.key  = key;
		this.val = val;
		this.prev = null;
		this.next = null;
	}	
}
class LRUCache {
	
	HashMap<Integer, Node> map ;
	Node head, tail;	
	int size;

    	public LRUCache(int capacity) {
        	map = new HashMap<>();
		head = new Node(-1,-1);
		tail = new Node(-1, -1);
		int size = capacity;
		head.next = tail;
		tail.prev = head;
    	}
    
    	public int get(int key) {
		if(map.containsKey(key)){
			Node currNode = map.get(key);
			Node prev = currNode.prev;
			prev.next = currNode.next;
			currNode.next.prev = prev;
			
			Node newNode = new Node(key, currNode.val);
			addAtLast(newNode);
			return map.get(key).val;
		}
		return -1;
        
    	}
	
	public void addAtLast(Node newNode){
			Node prevNode = tail.prev;
			prevNode.next = newNode;
			newNode.prev = prevNode;
			newNode.next = tail;
			tail.prev = newNode;
	}
    
    	public void put(int key, int value) {
		if(map.containsKey(key)){
			Node currNode = map.get(key);
			Node prev = currNode.prev;
			prev.next = currNode.next;
			currNode.next.prev = prev;
			
			Node newNode = new Node(key,value);
			addAtLast(newNode);

			map.put(key, newNode);

			return;
		}
		if(map.size() >= size){
			Node toevict = head.next;
			head.next = toevict.next;
			toevict.next.prev = head;
			map.remove(toevict.key);
			
			Node newNode = new Node(key,value);
			addAtLast(newNode);

			map.put(key, newNode);

		}
		else{
			Node newNode = new Node(key,value);
			addAtLast(newNode);
			
			map.put(key, newNode);
	
		}
		
        
    	}
}


// 61 -> Rotate List

class Solution {
	
	public ListNode reverse(ListNode start, ListNode end){
		
		ListNode prev = null, curr = start, next = curr;
		while(curr != end){
			next = curr.next;
			curr.next = prev;
			prev = curr;
		}
		return prev;
	}

    	public ListNode rotateRight(ListNode head, int k) {
        
		ListNode res = new ListNode(-1), ptr = res;
		
		// reverse complete list
		ListNode newHead = reverse(head, null);
		ptr = head;
		
		int curr = 1;
		while(curr != k){
			ptr = ptr.next;
			curr++;
		}
		
		// second part start = ptr.next
		ListNode secondStart = ptr.next;
		
		res.next = reverse(newHead, secondStart);
		newHead.next = reverse(secondStart,null);
		
		
		return res.next;
		 
			
    	}
}


// 82 -> remove duplicate


class Solution {
    	public ListNode deleteDuplicates(ListNode head) {
        	ListNode res = new ListNode(-1), resPtr = res, curr = head;
		if(head== null) return null;
		
		while(curr != null)
		{	
	
			ListNode ptr = curr;
			while(ptr.next != null && ptr.next.val == curr.val){
				ptr = ptr.next;
			}

			if(ptr == curr){
				resPtr.next = curr;
				resPtr = resPtr.next;
			}
						
			curr = ptr;
		}
		resPtr.next = null;

		return res.next;
    	}
}



// 19 -> rmove nth node from last


class Solution {
	int count = 0;
	public ListNode remove(ListNode root, int n){
		if(root == null){
			return null;
		}
		
		root.next = remove(root.next, n);
		count++;
		if(count == n){
			return root.next;
		}
		else return root;
		
	}

    	public ListNode removeNthFromEnd(ListNode head, int n) { 
		if(head == null) return null;

	      	return remove(head, n);
    }
}


// 25 -> Reverse nodes in k group

class Solution {
	public ListNode reverse(ListNode initial, ListNode final){
		ListNode prev = null, curr = initial, next = curr;
		
		while(curr != final){
			next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
		}
		return prev;
	}


	public ListNode reverseKGroup(ListNode head, int k) {
        	
		if(head == null || k == 0) return head;
	
		ListNode res = new ListNode(-1), resPtr = res, ptr = head;
		
		while(ptr != null)
		{	int count = 1;
			ListNode curr = ptr;
			while(ptr != null && count != k){
				ptr = ptr.next;
				count++;
			}
			if(ptr == null){
				resPtr.next = curr;
			}
			else{
				resPtr.next = reverse(curr, ptr.next);
				resPtr = curr;
				ptr = ptr.next;
			}
		
		}
		
		return res.next;
	}
}




 


