// 104 -> Maximum Depth of Binary Tree

class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;
	
	int left = maxDepth(root.left), right = maxDepth(root.right);
	return Math.max(left, right)+1;
    }
}


// 100 -> Same Tree

class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null) return true;
	if(p == null || q == null) return false;
	
	if(p.val != q.val) return false;
	return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}


// 226 -> Invert Binary Tree


class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null) return null;
	TreeNode left = invertTree(root.left), right = invertTree(root.right);		
	root.left = right;
	root.right = left;
	return root;	

    }
}


// 101 -> Symmetric Tree

class Solution {
	public boolean isSymmetric(TreeNode root1, TreeNode root2) {
        	if(root1 == null && root2 == null) return true;
		if(root1 == null || root2 == null) return false;
		if(root1.val == root2.val){
			return isSymmetric(root1.left, root2.right) && isSymmetric(root1.right, root2.left);
		}
		else return false;
    }

    public boolean isSymmetric(TreeNode root) {
	if(root == null) return true;
        return isSymmetric(root, root);
    }	
}


// 112 -> Path Sum 

class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null) return false;
	targetSum -= root.val;
	
	if(target ==0 && root.left == null && root.right == null) return true;
	return hasPathSum(root.left, targetSum) || hasPathSum(root.right, targetSum);
    }
}


// 222 -> Count Complete Tree Nodes

class Solution {

	public int completeLevels(TreeNode root){
		int lCount=0, rCount =0;
		while(root.left != null){
			lCount++;
			root = root.left;
		}
		while(root.right != null){
			rCount++;
			root = root.right;
		}
		if(lCount == rCount) return lCount;
		else return -1;
	}
	
    public int countNodes(TreeNode root) {
        if(root == null) return 0;
	int isComplete = completeLevels(root);
	if(isComplete > 0) return (int)(Math.pow(2,isComplete+1))-1;
	return 1 + countNodes(root.left) + countNodes(root.right);
	
    }
}


// 129. Sum Root to Leaf Numbers


class Solution {
	
	public int helper(TreeNode root,int val){
		if(root = null) return 0;
		if(root.left == null && root.right == null){
			return (val* 10) + root.val;
		}
		int left = helper(root.left,(val*10)+ root.val), right = helper(root.right,(val*10)+ root.val); 
		return left + right;
	}

    public int sumNumbers(TreeNode root) {
	if(root ==null) return 0;
	return helper(root, 0);
	
        
    }
}


// 236. Lowest Common Ancestor of a Binary Tree

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null) return null;

	if(root == p || root == q) return root;
	
	TreeNode left = lowestCommonAncestor(root.left, p, q), right = lowestCommonAncestor(root.right, p, q);
	
	if(left != null && right != null) return root;
	if(left == null) return right;
	return left;
	
    }
}	


// 173. Binary Search Tree Iterator

class BSTIterator {
	
	ArrayList<Integer> list;
	int ptr;
	
	public void inorder(TreeNode root){
		if(root == null){
			return;
		}

		inorder(root.left);
		list.add(root.val);
		inorder(root.right);
	}
    public BSTIterator(TreeNode root) {
        list= new ArrayList<>();
	ptr = -1;
	inorder(root);
    }
    
    public int next() {
        ptr++;
	return list.get(ptr);
    }
    
    public boolean hasNext() {
        if(ptr+1 >= list.size()) return false;
	return true;
    }
}


// 117. Populating Next Right Pointers in Each Node II


class Solution {
    public Node connect(Node root) {
        
	if(root == null) return null;
	Queue<Node> q = new LinkedList<>();
	q.add(root);

	while(!q.isEmpty()){
		int size = q.size();
	
		while(size > 0){
			Node removed = q.remove();
			if(size > 1){
				removed.right = q.peek();
			}
			if(removed.left!= null){
				q.add(removed.left);
			}
			if(removed.right!= null){
				q.add(removed.right);
			}
			size--;
		}
	}
	return root;	
    }
}


// 124. Binary Tree Maximum Path Sum


class Solution {
	int maxRes =0;
	public int helper(TreeNode root){
		if(root == null) return 0;
		int left = helper(root.left), right = helper(root.right);
		max = Math.max(max, Math.max(left, right));
		max = Math.max(max, root.val + Math.max(left,0) + Math.max(right,0));
		return root.val + Math.max(Math.max(left,right),0);
	}

    public int maxPathSum(TreeNode root) {
        helper(root);
	return max;
    }
}


114. Flatten Binary Tree to Linked List


class Solution {
	TreeNode curr;
	public void preOrderHelper(TreeNode root){
		if(root == null) return;
		TreeNode orgRight = root.right, orgLeft = root.left;
        curr.right = root;
        curr.left = null;
        curr = root;
		preOrderHelper(orgLeft);
		preOrderHelper(orgRight);
	}


    public void flatten(TreeNode root) {
     		if(root == null) return;
		curr = new TreeNode(-1);
		preOrderHelper(root);   
    }
}


// 106. Construct Binary Tree from Inorder and Postorder Traversal


class Solution {
	HashMap<Integer, Integer> map;
	
	public TreeNode buildTree(int[] inorder, int inStart, int inEnd, int[] postorder, int postStart, int postEnd){
		
		if(inStart > inEnd || postStart > postEnd) return null;
		if(inStart == inEnd) return new TreeNode(inorder[inStart]);
		int lastElement = postorder[postEnd];
		int lastElementInorderIndex = map.get(lastElement);
		int numberOfLeftElements = lastElementInorderIndex - inStart;
		
		TreeNode newNode = new TreeNode(lastElement);
		newNode.left = buildTree(inorder,inStart,lastElementInorderIndex-1,postorder,postStart,postStart+numberOfLeftElements-1);
		newNode.right = buildTree(inorder,lastElementInorderIndex+1,inEnd,postorder,postStart+numberOfLeftElements,postEnd-1);
		return newNode;
	}

    public TreeNode buildTree(int[] inorder, int[] postorder) {
	
        map = new HashMap<>();
	for(int i=0;i<inorder.length;i++){
		map.put(inorder[i],i);
	}
	return buildTree(inorder, 0, inorder.length-1, postorder, 0, postorder.length-1);
    }
}


// 105. Construct Binary Tree from Preorder and Inorder Traversal


class Solution {
	HashMap<Integer, Integer> map;
	public TreeNode buildTree(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd) {
        	
		if(preStart < preEnd) return null;
		if(prestart == preEnd) return new TreeNode(preorder[preStart]);

		int firstElement = preorder[preStart];
		int firstElementInorderIndex =  map.get(firstElement);
		int numOfLeftElements = firstElementInorderIndex - prestart;
		
		TreeNode newNode = new TreeNode(firstElement);
		newNode.left = buildTree(preorder, preStart+1, preStart + numOfLeftElements , inorder, inStart, firstElementInorderIndex-1);
		newNode.rigth = buildTree(preorder,preStart + numOfLeftElements+1 , preEnd, inorder, firstElementInorderIndex+1, inEnd);
		
		return newNode;
    }


    public TreeNode buildTree(int[] preorder, int[] inorder) {

		map = new HashMap<>();

		for(int i=0;i<inorder.length;i++){
			map.put(inorder[i],i);
		}

        	return buildTree(preorder, 0, preorder.length, inorder, 0, inorder.length);
    }	
}


















