// 228 -> Summary Ranges

class Solution {
    public List<String> summaryRanges(int[] nums) {
	int n = nums.length, i =0, j=0;
	List<String> res = new ArrayList<>();
	if(n == 0) return res;

	while(j < n)
	{
		i = j;
		if(i == n-1){
			res.add(""+nums[i]);
			return res;
		}
		while(j< n-1 && nums[j]+1 == nums[j+1])
		{
			j++;
		}
		if(i != j){
			res.add(nums[i] +"->"+  nums[j]);
			j++;
		}
		else{
			res.add(""+nums[i]);
			j++;
		}
	}
	return res;
    }
}


// 56 - > Merge Intervals

class Solution {
    	public int[][] merge(int[][] intervals) {
		Arrays.sort(intervals, (a,b)-> a[0] - b[0]);
		ArrayList<int[]> list = new ArrayList<>();
		list.add(intervals[0]);
		
		for(int i=1;i<intervals.length;i++)
		{
			int[] last = list.get(list.size()-1);
			if(intervals[i][0] <= last[1])
			{
				list.get(list.size()-1)[1] = Math.max(last[1], intervals[i][1]);
				
			}
			else{
				res.add(intervals[i]);
			}
		}

		return res.toArray(new int[res.size()][2]);
    	}
}


// 57 -> Insert Interval

class Solution {
    	public int[][] insert(int[][] intervals, int[] newInterval) {
        	
		ArrayList<int[]> res = new ArrayList<>();
		Boolean isInserted = false;
		
		for(int[] interval : intervals)
		{
			if(isInserted == false && newInterval[1] < interval[0])
			{
				res.add(newInterval);
				res.add(interval);
				isInserted = true;
			}
			else if((newInterval[0]>= interval[0] && newInterval[0] <= interval[1]) || (newInterval[1]>= interval[0] && newInterval[1] <= interval[1]) || (interval[0] >= newInterval[0] && interval[1] <= newInterval[1]))
			{
				newInterval[0] = Math.min(newInterval[0], interval[0]);
				newInterval[1] = Math.max(newInterval[1], interval[1]);
			}
			else{
				res.add(interval);
			}
		}

		if(!isInserted) res.add(newInterval);
		return res.toArray(new int[res.size()][2]);
    	}
}


// Min arrows to burst

class Solution {
	public int findMinArrowShots(int[][] points) {
        	
		Arrays.sort(points, (a,b)-> 
        {
            // if(a[1] == b[1]){
            //     return a[0] < b[0]? -1:1;
            // }
            return a[1] < b[1]? -1:1;
        });
    
		int count = 1, maxReach = points[0][1];
		for(int i=1;i<points.length;i++)
		{
			if(points[i][0] > maxReach)
			{
				count++;
				maxReach = Math.max(points[i][1], maxReach);
			}
		}
		return count;
		
    	}
}











