// 28 -> First occurrence

class Solution {
    	public int strStr(String haystack, String needle) {
  		char[] nArr = needle.toCharArray(), hArr = haystack.toCharArray();
		
		int i=0, j=0;
		while(j < haystack.length()){
			int temp = j;
			while(i< needle.length() && j < haystack.length() && nArr[i] == hArr[temp])
			{
				i++;
				temp++;
			}
			
			if(i == needle.length()){
				return j;
			}
			else if(j >= haystack.length()) return -1;
			else{
				j++;
				i=0;
			}
		}
		return -1;
    	}
}


// 88 -> Merge sorted Array

class Solution {
    	public void merge(int[] nums1, int m, int[] nums2, int n) {
        	
		int ptr1 = m-1, ptr2 = n-1, resPtr = m+n-1;
		while(ptr1 >= 0 && ptr2 >= 0){
			if(nums1[ptr1] > nums2[ptr2]){
				nums1[resPtr] = nums1[ptr1];
				ptr1--;
			}
			else{
				nums1[resPtr] = nums2[ptr2];
				ptr2--;
			}
			resPtr--;
		}

		while(ptr1 >= 0){
			
				nums1[resPtr] = nums1[ptr1];
				ptr1--;
				resPtr--;
		}
		while(ptr2 >= 0){
			
				nums1[resPtr] = nums2[ptr2];
				ptr2--;
				resPtr--;
		}
    	}
}


// 27 -> Remove element

class Solution {
	public int removeElement(int[] nums, int val) {
        	
		int i =0, j = 0, k=0;
		for(int i=0;i<nums.length;i++)
		{
			if(nums[i] != val){
				nums[j++] = nums[i];
				k++;
			}
		}
		return k;
	}
}


// 26 -> Remove Duplicates

class Solution {
	public int removeDuplicates(int[] nums) {
        	
		int i= 1,replace = 1, k=0;
		while(i < nums.length){
			if(nums[i] == nums[i-1]){
				i++;
			}
			else{
				nums[replace++] = nums[i++];
				k++;
			}
		}
		return k;
	}
}


// 19 -> Majority Element

class Solution {
	public int majorityElement(int[] nums) {
        	
		int majElement = nums[0], majCount =1;
		for(int i=1;i< nums.length;i++){
			if(nums[i] != majElement){
				majCount--;
				if(majCount < 0){
					majCount =1;
					majElement = nums[i];
				}
			}
			else{
				majCount++;
			}
		}
		return majElement;
	}
}


// 121 -> sell stock

class Solution {
    	public int maxProfit(int[] prices) {
        	int buy = prices[0], max = 0;
		for(int i=1;i<prices.length;i++)
		{
			if(prices[i] > buy)
			{
				max = Math.max(max, prices[i]- buy);
			}
			else{
				buy = prices[i];
			}
		}
		return max;
    	}
}


// 80 -> Remove duplicate 2

class Solution {
	public int removeDuplicates(int[] nums) {
        	
		int i=0,j=0,k=2,ptr =0;
		
		while(j < nums.length){
			int count =0;
			while(j< nums.length && nums[j]== nums[i])
			{
				if(count < k){
					nums[ptr++]= nums[j];
					count++;
				}
				j++;
			}
			if(j==nums.length) return ptr;
			else{
				i =j;
			}
		} 
		return ptr;
    	}
}

// 189 -> Rotate Array

class Solution {
    public void reverse(int[] nums, int start, int end){
        
        while(start < end){
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
    public void rotate(int[] nums, int k) {
        
        int size = nums.length;
        k = k % size;
        if(size == 0 || k== 0) return;
        
        // reverse complete
        reverse(nums,0, size-1);

        // revrse first part    
        reverse(nums, 0, k-1);
        // reverse second part

        reverse(nums, k, size-1);
    }
}


// 238 -> Product of array 

class Solution {
    public int[] productExceptSelf(int[] nums) {
        
        int[] left = new int[nums.length], right = new int[nums.length];

        left[0] = right[nums.length-1] = 1; 
        for(int i=1;i<nums.length;i++){
            left[i] = left[i-1] * nums[i-1];
        }

        for(int i=nums.length-2;i>=0;i--){
            right[i] = right[i+1] * nums[i+1];
        }

        for(int i=1;i<nums.length;i++){
            right[i] *= left[i];
        }

        return right;
    }
}


// 55 -> Jump Game 

class Solution {
    	public boolean canJump(int[] nums) {
        	int n = nums.length, i =0, max = 0;
		while(i <= max)
		{	
			max = Math.max(max, i+nums[i]);
			if(max >= n-1) return true;
		}
		return false;	
    	}
}


// 45 -> Jump Game 2

class Solution {
    	public int jump(int[] nums) {
        	int[] dp = new int[nums.length];
		Arrays.fill(dp,Integer.MAX_VALUE);
		dp[0] = 0;
		for(int i = 1;i<nums.length;i++){
			for(int j=i-1;j>=0;j--)
			{	
				if(j+nums[j] >= i){
					dp[i] = Math.min(dp[i],1+dp[j]);
				}
				
			}
		}
		return dp[nums.length-1];
    	}
}


// 134 - Gas Station

class Solution {
    	public int canCompleteCircuit(int[] gas, int[] cost) {
       		int sumG =0, sumC=0;
		int[] diff = new int[gas.length];

		for(int i=0;i<gas.length;i++){
			sumG += gas[i];
			sumC += cost[i];
			diff[i] = gas[i]-cost[i];
		}
		if(sumC > sumG) return -1;
		
		int sum =0, index =0;
		for(int i=0;i<gas.length;i++){
			sum += diff[i];
			if(sum < 0){
				sum =0;
				index = i+1;
			}
			
		}
		return index;	
    	}
}


// 274 -> h -INDEX

class Solution {
    	public int hIndex(int[] citations) {
      		int size = citations.length;
		Arrays.sort(citations);
		int i =0, h =0;
		while(i < size){
			int curr = Math.min(size -i, citations[i]);
			h = Math.max(h,curr);	
			i++;	
		}
		return h;
    	}
}


// 151 -> Reverse words

class Solution {
    public String reverseWords(String s) {
        s = s.trim();
        String[] arr =  s.split("\\s+");

        int i=0, j= arr.length-1;
        String temp = "";
        while(i < j){
            temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }
        StringBuilder sb = new StringBuilder();
        
        for(int k =0;k<arr.length;k++){
            sb.append(arr[k]);
            if(k!=arr.length-1){
                sb.append(" ");
            }
        }
        return sb.toString();
    }
} 


// 380 -> Randomised Set

class RandomizedSet {

    List<Integer> list;
    HashMap<Integer, Integer> map;
    public RandomizedSet() {
        list = new ArrayList<>();
        map = new HashMap<>();
    }
    
    public boolean insert(int val) {
        
        if(map.containsKey(val)){
            return false;
        }
        list.add(val);
        map.put(val,list.size()-1);
        return true;
    }
    
    public boolean remove(int val) {
        if(!map.containsKey(val)) return false;

        int ind = map.get(val), lastVal = list.get(list.size()-1);
        list.set(ind,lastVal);
        list.remove(list.size()-1);

        map.put(lastVal, ind);
        map.remove(val);
        return true;
    }
    
    public int getRandom() {
        // int randInd = (int) (Math.random() * list.size());
        Random random = new Random();

        return list.get(random.nextInt(list.size()));
    }
}


// buy & sell stock - 2


class Solution {
    	public int maxProfit(int[] prices) {
            int n = prices.length;
        	int[][] dp = new int[n+1][2];
		dp[n][0]= 0;
		dp[n][1]= 0;
		int i= n-1;
		while(i >=0){
			dp[i][0] = Math.max(-prices[i]+dp[i+1][1],dp[i+1][0]);
			dp[i][1] = Math.max(prices[i]+dp[i+1][0],dp[i+1][1]);
			i--;
		}
		return Math.max(dp[0][0],0);
    	}
}


// 42 -> Trapping Rain water

class Solution {
    	public int trap(int[] height) {
        	int total =0, n =height.length;
		int[] left = new int[n], right = new int[n];
		for(int i=1;i<n;i++){
			left[i] = Math.max(left[i-1],height[i-1]);	
		}
		for(int i=n-2;i>=0;i--){
			right[i] = Math.max(right[i+1],height[i+1]);	
		}
		for(int i=1;i<n;i++){	
			total += Math.max(Math.min(left[i], right[i]) - height[i],0);
		}
		return total;
    	}
}


// 135 -> Candy

class Solution {
    	public int candy(int[] ratings) {
        	
		int total =0, n = ratings.length;
		int[] left = new int[n], right = new int[n];
		left[0] =1; right[n-1] =1;
		for(int i=1;i<n;i++){
			if(ratings[i] > ratings[i-1]){
				left[i] = left[i-1]+1;
			}
			else{
				left[i] = 1;
			}
		}
		for(int i=n-2;i>=0;i--){
			if(ratings[i] > ratings[i+1]){
				right[i] = right[i+1]+1;
			}
			else{
				right[i] = 1;
			}
		}
		for(int i=0;i<n;i++){
			total += Math.max(left[i], right[i]);
		}
		return total;
    	}
}


14 -> largest prefix


class Solution {
    public String longestCommonPrefix(String[] strs) {
        
        String prefix = strs[0];
        for(int i=1;i<strs.length;i++){
        	int j=0;
		while(j< prefix.length() && j< strs[i].length() && strs[i].charAt(j) == prefix.charAt(j)){
			j++;
		}
		prefix = prefix.substring(0,j);    
        }
		return prefix;
    }
}


// 6 -> Zigzag


class Solution {
    public String convert(String s, int numRows) {
        	int i=0;
		StringBuilder[] sb = new StringBuilder[numRows];

		while(i < s.length()){
			int j=0;
			while(i<s.length() && j<numRows-1){
				sb[j].append(s.charAt(i));
				j++;
				i++;
			}
			while(i<s.length() && j > 0){
				sb[j].append(s.charAt(i));
				j--;
				i++;
			}

		}
		
		StringBuilder res = new StringBuilder();
		for(StringBuilder si : sb){
			res.append(si.toString());
		}
		return res;
    }
}










